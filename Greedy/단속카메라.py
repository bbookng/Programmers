def solution(routes):
    answer = 1                              # 적어도 한 대는 필요하다.
    routes.sort(key = lambda x: x[1])       # 진출 지점을 기준으로 정렬
    tmp = routes[0][1]                      # 첫 기준점은 정렬된 차량경로의 진출지점. (최소갯수로 설치해야 하기 때문에)

    for i in range(1, len(routes)):         # 첫 차 빼고 차량루트 반복
        if routes[i][0] > tmp:              # 현재 차량의 진입지점이 직전 차의 진출지점보다 크면
            answer += 1                     # 카메라 한 대 추가
            tmp = routes[i][1]              # 기준점을 현재 차량의 진출지점으로 변경.
    return answer

print(solution([[-20,-15], [-14,-5], [-18,-13], [-5,-3]]))

'''
정확성  테스트
테스트 1 〉	통과 (0.01ms, 10.2MB)
테스트 2 〉	통과 (0.02ms, 10.1MB)
테스트 3 〉	통과 (0.02ms, 10.2MB)
테스트 4 〉	통과 (0.02ms, 10.3MB)
테스트 5 〉	통과 (0.02ms, 10.2MB)

효율성  테스트
테스트 1 〉	통과 (0.43ms, 10.4MB)
테스트 2 〉	통과 (0.22ms, 10.2MB)
테스트 3 〉	통과 (0.80ms, 10.5MB)
테스트 4 〉	통과 (0.06ms, 9.97MB)
테스트 5 〉	통과 (1.04ms, 10.7MB)
'''